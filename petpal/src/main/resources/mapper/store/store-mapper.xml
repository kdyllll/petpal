<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "- //mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="store">
	<select id="selectProduct" resultType="storeProduct" parameterType="string">
		SELECT * FROM PRODUCT WHERE PRODUCTNO=#{productNo}
	</select>
	<select id="selectStockList" resultType="storeStock" parameterType="string">
		SELECT * FROM STOCK WHERE PRODUCTNO=#{productNo}
	</select>
	<select id="selectImg" resultType="storeImg" parameterType="string">
		SELECT * FROM PRODUCTIMG WHERE PRODUCTNO=#{productNo} ORDER BY PRODUCTIMGNO
	</select>
	<select id="dogList" resultType="storeProduct">
	<!-- 재고가 있고,가격이 책정되있는 것들중에 제일 가격이 낮고 타입이 'M'인 상품리스트를 중복없이 뽑아냄 -->
		SELECT DISTINCT PRODUCTNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN('D1','D2','D3','D4','D5') AND PRICE>0 AND STOCK>0 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="catList" resultType="storeProduct">
		SELECT DISTINCT PRODUCTNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN('C1','C2','C3','C4','C5') AND PRICE>0 AND STOCK>0 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="smallList" resultType="storeProduct">
		SELECT DISTINCT PRODUCTNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN('S1','S2','S3','S4','S5') AND PRICE>0 AND STOCK>0 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="categoryList" resultType="storeProduct" parameterType="string">
		SELECT DISTINCT ENROLLDATE,PRODUCTNO,PRICE,SALE,PRODUCTNAME,IMGNAME,CATEGORYNO,SUBCATE FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN(#{cNo}) AND PRICE>0 AND STOCK>0 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="subCateList" resultType="map" parameterType="string">
		<!-- SELECT DISTINCT SUBCATE FROM PRODUCT WHERE CATEGORYNO=#{cNo} -->
		SELECT DISTINCT SUBCATE FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN(#{cNo}) AND PRICE>0 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="soldOutList" resultType="storeProduct" parameterType="string">
		SELECT DISTINCT PRODUCTNO,CATEGORYNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) WHERE CATEGORYNO IN(#{cNo}) AND PRICE>0 GROUP BY PRODUCTNO HAVING SUM(STOCK)=0) AND TYPE='M' 
	</select>
	<select id="payCheck" resultType="string" parameterType="map">
		SELECT DETAILNO FROM PAYMENT LEFT JOIN PAYDETAIL USING(PAYMENTNO) LEFT JOIN STOCK USING(STOCKNO) 
		WHERE MEMBERNO=#{memberNo} AND PRODUCTNO=#{productNo} AND FLOOR(SYSDATE-PAYDATE)<![CDATA[<]]>14
		AND DETAILNO IN(SELECT DETAILNO FROM PAYDETAIL LEFT JOIN REVIEW USING(DETAILNO) WHERE REVIEWNO IS NULL) 
	</select>
	<insert id="insertReview" parameterType="review">
		INSERT INTO REVIEW VALUES(SEQ_REVIEWNO.NEXTVAL,#{detailNo},#{memberNo},#{content},SYSDATE,#{star},
		<choose>
			<when test="fileName!=null">
				#{fileName}
			</when>
			<otherwise>
				NULL
			</otherwise>
		</choose>
		,NULL)
	</insert>
	<select id="selectReview" resultType="review" parameterType="string">
		SELECT * FROM REVIEW LEFT JOIN MEMBER USING(MEMBERNO) LEFT JOIN PAYDETAIL USING(DETAILNO) LEFT JOIN STOCK USING(STOCKNO) WHERE PRODUCTNO=#{productNo} ORDER BY REVIEWDATE DESC
	</select>
	<select id="selectStock" resultType="map" parameterType="string">
		SELECT DETAILNO,COLOR,PRODUCTSIZE,PAYDATE FROM PAYDETAIL LEFT JOIN STOCK USING(STOCKNO) LEFT JOIN PAYMENT USING(PAYMENTNO) WHERE DETAILNO=#{detailNo}
	</select>
	<delete id="deleteReview" parameterType="string">
		DELETE FROM REVIEW WHERE REVIEWNO=${value}
	</delete>
	<update id="updateReview" parameterType="review">
		UPDATE REVIEW
		<set>
			<if test="fileName != null">
				FILENAME =#{fileName},
			</if>
			<if test="content != null">
				CONTENT =#{content},
			</if>
			STAR=#{star}
		</set>
		WHERE REVIEWNO=#{reviewNo}
	</update>
	<select id="selectReviewOne" resultType="review" parameterType="string">
		SELECT * FROM REVIEW LEFT JOIN PAYDETAIL USING(DETAILNO) LEFT JOIN STOCK USING(STOCKNO) WHERE REVIEWNO=#{reviewNo}
	</select>
	<update id="reviewComment" parameterType="map">
		UPDATE REVIEW SET REVIEWCOMMENT=#{reviewComment} WHERE REVIEWNO=#{reviewNo, jdbcType=VARCHAR}
	</update>
	<select id="selectMainImg" resultType="storeImg" parameterType="string">
		SELECT * FROM PRODUCTIMG WHERE PRODUCTNO=#{productNo} AND TYPE='M'
	</select>
	<insert id="insertQna" parameterType="qna">
		INSERT INTO QNA VALUES(SEQ_QNANO.NEXTVAL,#{productNo},#{memberNo},#{content},NULL,SYSDATE,NULL,#{category},
		<choose>
			<when test="secret!=null">
				'Y'
			</when>
			<otherwise>
				DEFAULT
			</otherwise>
		</choose>	
		)
	</insert>
	<select id="selectQna" resultType="qna" parameterType="string">
		SELECT * FROM QNA LEFT JOIN MEMBER USING(MEMBERNO) WHERE PRODUCTNO=#{productNo} ORDER BY QNADATE DESC
	</select>
	<delete id="deleteQna" parameterType="string">
		DELETE FROM QNA WHERE QNANO=${value}
	</delete>
	<select id="selectQnaOne" resultType="qna" parameterType="string">
		SELECT * FROM QNA WHERE QNANO=#{qnaNo}
	</select>
	<update id="updateQna" parameterType="qna">
		UPDATE QNA SET CATEGORY=#{category},CONTENT=#{content},SECRET= 
		<choose>
			<when test="secret!=null">
				'Y'
			</when>
			<otherwise>
				DEFAULT
			</otherwise>
		</choose>
		WHERE QNANO=#{qnaNo, jdbcType=VARCHAR}
	</update>
	<update id="writeQnaComment" parameterType="map">
		UPDATE QNA SET QNACOMMENT=#{qnaComment},COMMENTDATE=SYSDATE WHERE QNANO=#{qnaNo}
	</update>
	<update id="editQnaComment" parameterType="map">
		UPDATE QNA SET QNACOMMENT=#{qnaComment} WHERE QNANO=#{qnaNo}
	</update>
	<update id="deleteQnaComment" parameterType="string">
		UPDATE QNA SET QNACOMMENT=NULL,COMMENTDATE=NULL WHERE QNANO=#{value}
	</update>
	<select id="totalReviewCount" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM REVIEW LEFT JOIN MEMBER USING(MEMBERNO) LEFT JOIN PAYDETAIL USING(DETAILNO) LEFT JOIN STOCK USING(STOCKNO) WHERE PRODUCTNO=#{productNo}
	</select>
	<select id="totalQnaCount" parameterType="string" resultType="_int">
		SELECT COUNT(*) FROM QNA LEFT JOIN MEMBER USING(MEMBERNO) WHERE PRODUCTNO=#{productNo}
	</select>
	<select id="selectDailyImg" parameterType="string" resultType="dailyImg">
		SELECT * FROM DAILYIMG LEFT JOIN COORD USING(DAILYIMGNO) WHERE PRODUCTNO=#{productNo}
	</select>
	<!-- 검색 상품리스트 -->
	<select id="searchProduct" resultType="storeProduct" parameterType="string">
		SELECT DISTINCT PRODUCTNO,CATEGORYNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) GROUP BY PRODUCTNO) AND TYPE='M' AND PRICE>0 AND PRODUCTNAME LIKE '%'||#{keyword}||'%'
	</select>
	<insert id="insertFav" parameterType="map">
		INSERT INTO FAV VALUES(#{productNo},#{memberNo})
	</insert>
	<select id="favList" resultType="storeProduct" parameterType="string">
		SELECT * FROM  FAV JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE MEMBERNO=#{memberNo} AND TYPE='M'
	</select>
	<delete id="deleteFav" parameterType="map">
		DELETE FROM FAV WHERE PRODUCTNO=#{productNo} AND MEMBERNO=#{memberNo}
	</delete>
	<select id="starList" resultType="storeProduct">
		SELECT ROUND(AVG(STAR),1)STAR,PRODUCTNO FROM REVIEW JOIN PAYDETAIL USING(DETAILNO) JOIN STOCK  USING(STOCKNO) GROUP BY PRODUCTNO
	</select>
	<select id="selectAvgReview" resultType="double" parameterType="string">
		SELECT ROUND(AVG(STAR),1) FROM REVIEW LEFT JOIN PAYDETAIL USING(DETAILNO) LEFT JOIN STOCK USING(STOCKNO) WHERE PRODUCTNO=#{productNo}
	</select>
	<select id="saleList" resultType="storeProduct">
		SELECT SUM(CNT) AS CNT,PRODUCTNO FROM PAYDETAIL JOIN STOCK USING(STOCKNO) JOIN PRODUCT USING(PRODUCTNO) WHERE DETAILSTATUS='결제' GROUP BY PRODUCTNO
	</select>
	<select id="categorySortList" resultType="storeProduct" parameterType="string">
		SELECT DISTINCT ENROLLDATE,PRODUCTNO,PRICE,SALE,PRODUCTNAME,IMGNAME,CATEGORYNO FROM STOCK JOIN PRODUCT USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO) WHERE CATEGORYNO IN(#{cNo}) AND PRICE>0 AND STOCK>0
<if test="subcate != null">
	AND SUBCATE =#{subcate}
</if>
 GROUP BY PRODUCTNO) AND TYPE='M'
	</select>
	<select id="soldOutList2" resultType="storeProduct" parameterType="string">
		SELECT DISTINCT PRODUCTNO,CATEGORYNO,PRICE,SALE,PRODUCTNAME,IMGNAME FROM PRODUCT JOIN STOCK USING(PRODUCTNO) JOIN PRODUCTIMG USING(PRODUCTNO)
WHERE (PRODUCTNO,PRICE) IN (SELECT PRODUCTNO,MIN(PRICE) FROM PRODUCT JOIN STOCK USING(PRODUCTNO) WHERE CATEGORYNO IN(#{cNo}) AND PRICE>0
	<if test="subcate != null">
	AND SUBCATE =#{subcate}
	</if>
 GROUP BY PRODUCTNO HAVING SUM(STOCK)=0) AND TYPE='M' 
	</select>
</mapper>
